buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.5.0'
  }
}

plugins {
  id "com.github.hierynomus.license"  version "0.15.0"
}

ext {
  //semver-git config
  nextVersion = "patch"
  snapshotSuffix = "SNAPSHOT"
  isReleaseVersion = { !(project.version =~ /-SNAPSHOT$/) }
  signableTempPomFile = file("${project.buildDir}/signable-generated-pom.xml")

  projectName = 'keepachangelog-parser-java'
  githubProject = "colindean/${projectName}"
  githubUrl = "https://github.com/${githubProject}"
}

ext.'signing.keyId' = System.getenv('GPG_KEY_ID')
ext.'signing.secretKeyRingFile' = "${System.getenv('HOME')}/.gnupg/secring.gpg"
ext.'signing.password' = System.getenv('GPG_PASSPHRASE')

apply plugin: 'com.cinnober.gradle.semver-git'

group 'cx.cad.keepachangelog'

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
  jcenter()
}

dependencies {
  compile     group: 'com.vladsch.flexmark',  name: 'flexmark',     version: '0.19.6'
  compile     group: 'com.github.zafarkhaja', name: 'java-semver',  version: '0.10.2'
  testCompile group: 'junit',                 name: 'junit',        version: '4.13.2'
}

javadoc {
  exclude "**/internal/**"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

def pomConfig = {
  licenses {
    license([:]) {
      name "The Apache Software License, Version 2.0"
      url "http://www.apache.org/licenses/LICENSE-2.0.txt"
      distribution "repo"
    }
  }
  developers {
    developer {
      id "colindean"
      name "Colin Dean"
      email "git@cad.cx"
      url "https://github.com/colindean"
    }
  }

  scm {
    url project.ext.githubUrl
    connection "scm:git:${project.ext.githubUrl}.git"
    developerConnection "scm:git:ssh://git@github.com:${project.ext.githubProject}.git"
  }
}

jar {
  manifest {
    attributes 'Implementation-Title': project.ext.projectName,
               'Implementation-Version': version,
               'Implementation-Vendor': 'Colin Dean'
  }
  from "LICENSE.md"
}

license {
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
  ext.copyright = 'Colin Dean'
  header = file('.copyright_header')
  strictCheck true
  skipExistingHeaders true
}

/*
publishing {
  publications {
    Bintray(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId 'cx.cad.keepachangelog'
      artifactId 'changelog-parser'
      version project.version
      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'A parser for keepachangelog Markdown-formatted changelogs')
        root.appendNode('name', project.ext.projectName)
        root.appendNode('url', project.ext.githubUrl)
        root.children().last() + pomConfig
      }

      if (signing.required) {
        // Sign the pom.xml.
        pom.withXml {
          writeTo(project.ext.signableTempPomFile)
          def pomAscFile = signing.sign(project.ext.signableTempPomFile).signatureFiles[0]
          artifact(pomAscFile) {
            classifier = null
            extension = 'pom.asc'
          }
          project.ext.signableTempPomFile.delete()
        }

        // Sign the artifacts.
        project.tasks.signArchives.signatureFiles.each {
          artifact(it) {
            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
            if (matcher.find()) {
              classifier = matcher.group(1)
            } else {
              classifier = null
            }
            extension = 'jar.asc'
          }
        }
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = ['Bintray']
  pkg {
    repo = 'cx.cad.keepachangelog'
    name = 'changelog-parser'
    desc = 'A parser for keepachangelog Markdown-formatted changelogs'
    licenses = ['Apache-2.0']
    websiteUrl = project.ext.githubUrl
    issueTrackerUrl = "${project.ext.githubUrl}/issues"
    vcsUrl = "${project.ext.githubUrl}.git"
    githubRepo = project.ext.githubProject
    githubReleaseNotesFile = 'README.md'
    version {
      name = project.version
      desc = "keepachangelog parser for Java ${project.version}"
      released  = new Date()
      vcsTag = project.version
    }
    publish = true
  }
}

signing {
  sign configurations.archives
  required { project.ext.isReleaseVersion() && signatory != null }
}
*/
